// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const feedsCreate = `-- name: FeedsCreate :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at
`

type FeedsCreateParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) FeedsCreate(ctx context.Context, arg FeedsCreateParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, feedsCreate,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const feedsGetByURL = `-- name: FeedsGetByURL :one

SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at 
FROM feeds
WHERE url = $1
`

func (q *Queries) FeedsGetByURL(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, feedsGetByURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const feedsGetList = `-- name: FeedsGetList :many

SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at 
FROM feeds
`

func (q *Queries) FeedsGetList(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, feedsGetList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const feedsGetNextToFetch = `-- name: FeedsGetNextToFetch :one

SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at 
FROM feeds
ORDER BY last_fetched_at ASC NULLS FIRST
LIMIT 1
`

func (q *Queries) FeedsGetNextToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, feedsGetNextToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const feedsMarkedFetched = `-- name: FeedsMarkedFetched :one

UPDATE feeds
SET updated_at = NOW(), last_fetched_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at
`

func (q *Queries) FeedsMarkedFetched(ctx context.Context, id uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, feedsMarkedFetched, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const feedsReset = `-- name: FeedsReset :exec

DELETE FROM feeds
`

func (q *Queries) FeedsReset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, feedsReset)
	return err
}
