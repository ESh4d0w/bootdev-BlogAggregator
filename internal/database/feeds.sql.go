// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const feedCreate = `-- name: FeedCreate :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, name, url, user_id
`

type FeedCreateParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) FeedCreate(ctx context.Context, arg FeedCreateParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, feedCreate,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const feedGetList = `-- name: FeedGetList :many
SELECT feeds.name, feeds.url, users.name as user_name
FROM feeds
LEFT JOIN users
ON feeds.user_id = users.id
ORDER BY user_name
`

type FeedGetListRow struct {
	Name     string
	Url      string
	UserName sql.NullString
}

func (q *Queries) FeedGetList(ctx context.Context) ([]FeedGetListRow, error) {
	rows, err := q.db.QueryContext(ctx, feedGetList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedGetListRow
	for rows.Next() {
		var i FeedGetListRow
		if err := rows.Scan(&i.Name, &i.Url, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const feedReset = `-- name: FeedReset :exec
DELETE FROM feeds
`

func (q *Queries) FeedReset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, feedReset)
	return err
}
