// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const userCreate = `-- name: UserCreate :one
INSERT INTO users (id, created_at, updated_at, name)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, name
`

type UserCreateParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userCreate,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const userGetByName = `-- name: UserGetByName :one
SELECT id, created_at, updated_at, name FROM users WHERE name = $1
`

func (q *Queries) UserGetByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, userGetByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const userGetList = `-- name: UserGetList :many
SELECT id, created_at, updated_at, name FROM users
`

func (q *Queries) UserGetList(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, userGetList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userReset = `-- name: UserReset :exec
DELETE FROM users
`

func (q *Queries) UserReset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, userReset)
	return err
}
